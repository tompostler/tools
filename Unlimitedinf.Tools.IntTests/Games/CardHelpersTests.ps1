$fileName = Join-Path $PSScriptRoot "CardHelpersTests.g.cs";
Write-Host "Generating $fileName";

# File setup
@"
//
// This code was generated by a tool. Any changes made manually will be lost the next time this code is regenerated.
//

using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Unlimitedinf.Tools.Games;

namespace Unlimitedinf.Tools.IntTests.Games
{
    public partial class CardHelpersTests
    {
"@ > $fileName;

# Source data for the tests (sorted high to low)
$testCases = @(
    # MethodName	 Expected Score	 Hand To Parse										 ScoreHandType
	("RoyalFlush",  "0x900000",     "Cards.HA, Cards.HK, Cards.HQ, Cards.HJ, Cards.HT", "RoyalFlush"),
	("StraitFlus1", "0x80000D",     "Cards.H9, Cards.HK, Cards.HQ, Cards.HJ, Cards.HT", "StraightFlush"),
	("StraitFlus2", "0x800009",     "Cards.S9, Cards.S8, Cards.S5, Cards.S6, Cards.S7", "StraightFlush"),
	("StraitFlus3", "0x800006",     "Cards.C2, Cards.C4, Cards.C6, Cards.C3, Cards.C5", "StraightFlush"),
	("FourOfAKin1", "0x70000E",     "Cards.CA, Cards.DA, Cards.HA, Cards.SA, Cards.HT", "FourOfAKind"),
	("FourOfAKin2", "0x700008",     "Cards.C8, Cards.D8, Cards.H8, Cards.S8, Cards.HT", "FourOfAKind"),
	("FullHouse1",  "0x60000A",     "Cards.CT, Cards.DT, Cards.HT, Cards.S8, Cards.H8", "FullHouse"),
	("FullHouse2",  "0x600008",     "Cards.C8, Cards.D8, Cards.H8, Cards.ST, Cards.HT", "FullHouse"),
	("Flush1",      "0x5EDCB9",     "Cards.HA, Cards.HK, Cards.HQ, Cards.HJ, Cards.H9", "Flush"),
	("Flush2",      "0x5EA942",     "Cards.SA, Cards.ST, Cards.S9, Cards.S4, Cards.S2", "Flush"),
	("Flush3",      "0x5DCB98",     "Cards.C8, Cards.CK, Cards.CQ, Cards.CJ, Cards.C9", "Flush"),
	("Flush4",      "0x5DCB97",     "Cards.H7, Cards.HK, Cards.HQ, Cards.HJ, Cards.H9", "Flush"),
	("Straight1",   "0x40000D",     "Cards.HK, Cards.SQ, Cards.HJ, Cards.ST, Cards.H9", "Straight"),
	("Straight2",   "0x40000C",     "Cards.H8, Cards.SQ, Cards.HJ, Cards.ST, Cards.H9", "Straight"),
	("Straight3",   "0x400006",     "Cards.S2, Cards.S3, Cards.S4, Cards.S5, Cards.H6", "Straight"),
	("ThreeOfAKi1", "0x30000A",     "Cards.ST, Cards.HT, Cards.CT, Cards.D9, Cards.H6", "ThreeOfAKind"),
	("ThreeOfAKi2", "0x300007",     "Cards.S7, Cards.H7, Cards.C7, Cards.D9, Cards.H6", "ThreeOfAKind"),
	("ThreeOfAKi3", "0x300002",     "Cards.D2, Cards.H2, Cards.C2, Cards.D9, Cards.H6", "ThreeOfAKind"),
	("TwoPair1",    "0x200DAE",     "Cards.HK, Cards.DK, Cards.ST, Cards.CT, Cards.DA", "TwoPair"),
	("TwoPair2",    "0x200D9E",     "Cards.HK, Cards.DK, Cards.S9, Cards.C9, Cards.DA", "TwoPair"),
	("TwoPair3",    "0x200B9E",     "Cards.HJ, Cards.DJ, Cards.S9, Cards.C9, Cards.DA", "TwoPair"),
	("TwoPair4",    "0x200B95",     "Cards.SJ, Cards.CJ, Cards.H9, Cards.D9, Cards.D5", "TwoPair"),
	("OnePair1",    "0x109DA8",     "Cards.H9, Cards.D9, Cards.DK, Cards.DT, Cards.D8", "OnePair"),
	("OnePair2",    "0x109CA8",     "Cards.S9, Cards.C9, Cards.CQ, Cards.CT, Cards.C8", "OnePair"),
	("OnePair3",    "0x109CA7",     "Cards.H9, Cards.D9, Cards.DQ, Cards.DT, Cards.D7", "OnePair"),
	("OnePair4",    "0x108CA7",     "Cards.H8, Cards.D8, Cards.SQ, Cards.ST, Cards.S7", "OnePair"),
	("OnePair5",    "0x108765",     "Cards.S8, Cards.C8, Cards.C7, Cards.C6, Cards.C5", "OnePair"),
	("Nothing1",    "0x0EDCB9",     "Cards.HA, Cards.HK, Cards.HQ, Cards.HJ, Cards.S9", "Nothing"),
	("Nothing2",    "0x0ECB98",     "Cards.SA, Cards.SQ, Cards.SJ, Cards.S9, Cards.D8", "Nothing"),
	("Nothing3",    "0x0ECA98",     "Cards.DA, Cards.DQ, Cards.DT, Cards.D9, Cards.C8", "Nothing"),
	("Nothing4",    "0x0ECA87",     "Cards.CA, Cards.CQ, Cards.CT, Cards.C8, Cards.H7", "Nothing"),
	("Nothing5",    "0x0ECA86",     "Cards.HA, Cards.HQ, Cards.HT, Cards.H8, Cards.S6", "Nothing"),
	("Nothing6",    "0x0CBA87",     "Cards.SQ, Cards.SJ, Cards.ST, Cards.S8, Cards.D7", "Nothing")
)

# Turn the above array into actual test cases
foreach ($methodInfo in $testCases) {
@"
        [TestMethod]
        public void CardHelpers_ScoreHand_{0}()
        {{
            var expected = {1};
            var actual = CardHelpers.ScoreHand(new List<Cards> {{ {2} }});
            Assert.AreEqual(expected, actual, "{1}");
        }}

"@ -f $methodInfo >> $fileName;
}

# Turn the above array into actual test cases
foreach ($methodInfo in $testCases) {
@"
        [TestMethod]
        public void CardHelpers_ScoreHandType_{0}()
        {{
            var expected = ScoreHandType.{3};
            var actual = CardHelpers.ScoreHand(CardHelpers.ScoreHand(new List<Cards> {{ {2} }}));
            Assert.AreEqual(expected, actual, "{3}");
        }}

"@ -f $methodInfo >> $fileName;
}

# And then turn the above array into comparitive test cases
for ($i = 0; $i -lt $testCases.Length - 1; $i++) {
@"
        [TestMethod]
        public void CardHelpers_ScoreHand_Cmp_{0}_{2}()
        {{
            var higher = CardHelpers.ScoreHand(new List<Cards> {{ {1} }});
            var lower = CardHelpers.ScoreHand(new List<Cards> {{ {3} }});
            Assert.IsTrue(higher > lower, $"{{higher:X6}} > {{lower:X6}}");
        }}

"@ -f $testCases[$i][0],$testCases[$i][2],$testCases[$i+1][0],$testCases[$i+1][2] >> $fileName;
}

# File teardown
@"
    }
}
"@ >> $fileName;
